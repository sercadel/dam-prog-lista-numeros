#BlueJ class context
comment0.target=ListaNumeros
comment1.params=lista
comment1.target=ListaNumeros(int[])
comment1.text=\r\n\ Constructor\ para\ objetos\ de\ clase\ ListaNumeros\r\n
comment10.params=n
comment10.target=void\ borrarUno(int)
comment10.text=\r\n\ Borra\ un\ elemento\ de\ la\ lista\r\n\r\n\ @param\ \ n\ \ \ \u00EDndice\ del\ valor\ que\ se\ borrar\u00E1\ de\ la\ lista\r\n
comment11.params=
comment11.target=void\ escribirLista()
comment11.text=\r\n\ Muestra\ en\ pantalla\ la\ lista\r\n\r\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\r\n\ Devuelve\ una\ cadena\ con\ la\ representaci\u00F3n\ de\ la\ lista\r\n\ \r\n\ @return\ \ \ \ \ \ cadena\ con\ la\ representaci\u00F3n\ de\ la\ lista\r\n\r\n
comment13.params=
comment13.target=int[]\ copiar()
comment13.text=\r\n\ Devuelve\ una\ copia\ de\ la\ lista\r\n\ \r\n\ @return\ \ \ \ \ \ Array\ copia\ de\ la\ lista\r\n\r\n
comment14.params=from\ to
comment14.target=java.lang.String\ copiarRango(int,\ int)
comment14.text=\r\n\ Devuelve\ una\ cadena\ con\ los\ valores\ de\ la\ lista\ que\ est\u00E1n\ entre\ las\ posiciones\ from\ hasta\ to\r\n\ \r\n\ @return\ \ \ \ \ \ cadena\ con\ los\ valores\ de\ la\ lista\ que\ est\u00E1n\ entre\ from\ y\ to\r\n\r\n
comment15.params=pos
comment15.target=boolean\ indiceCorrecto(int)
comment15.text=\r\n\ Devuelve\ booleano\ si\ el\ \u00EDndice\ es\ correcto\ o\ no\r\n\ \r\n\ @return\ \ \ \ \ \ booleano\ \r\n\r\n
comment2.params=lista
comment2.target=ListaNumeros(int)
comment2.text=\r\n\ Constructor\ para\ objetos\ de\ clase\ ListaNumeros\r\n
comment3.params=valor
comment3.target=void\ anadirElemento(int)
comment3.text=\r\n\ A\u00F1ade\ el\ valor\ recibido\ como\ par\u00E1metro\ al\ final\ de\ la\ lista\r\n\ \r\n\ @param\ \ i\ \ \ valor\ que\ se\ a\u00F1ade\ a\ la\ lista\r\n\r\n
comment4.params=
comment4.target=int\ getTotalNumeros()
comment4.text=\r\n\ Devuelve\ el\ n\u00FAmero\ de\ elementos\ guardados\ en\ la\ lista\r\n\ \r\n\ @return\ \ \ \ \ \ N\u00FAmero\ de\ elementos\ en\ la\ lista\r\n\r\n
comment5.params=
comment5.target=void\ sumarPosicion()
comment5.text=\r\n\ A\u00F1ade\ a\ cada\ elemento\ del\ array\ el\ valor\ de\ su\ posici\u00F3n\r\n\r\n
comment6.params=
comment6.target=int\ obtenerMinimo()
comment6.text=\r\n\ Devuelve\ el\ valor\ m\u00EDnimo\ la\ lista\r\n\ \r\n\ @return\ \ \ \ \ \ Valor\ m\u00EDnimo\ de\ la\ lista\r\n\r\n
comment7.params=
comment7.target=int\ cuantosMinimos()
comment7.text=\r\n\ Devuelve\ el\ n\u00FAmero\ de\ valores\ m\u00EDnimos\ de\ la\ lista\r\n\ \r\n\ @return\ \ \ \ \ \ N\u00FAmero\ de\ valores\ m\u00EDnimos\ de\ la\ lista\r\n\r\n
comment8.params=
comment8.target=int[]\ generarArrayMinimos()
comment8.text=\r\n\ Devuelve\ un\ array\ con\ los\ valores\ m\u00EDnimos\ de\ la\ lista\r\n\ \r\n\ @return\ \ \ \ \ \ Array\ con\ los\ valores\ m\u00EDnimos\ de\ la\ lista\r\n\r\n
comment9.params=n
comment9.target=void\ borrarMultiplosDe(int)
comment9.text=\r\n\ Borra\ de\ lista\ todos\ los\ valores\ que\ sean\ m\u00FAltiplos\ del\ par\u00E1metro\r\n\r\n\ @param\ \ n\ \ \ valor\ que\ se\ borrar\u00E1\ de\ la\ lista\r\n
numComments=16
